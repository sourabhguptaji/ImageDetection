{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\E-mistri\\\\image_detection\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isModelLoading, setIsModelLoading] = useState(false);\n  const [model, setModel] = useState(null);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [results, setResults] = useState([]);\n  const imageRef = useRef();\n  const textInputRef = useRef();\n\n  const loadModel = async () => {\n    setIsModelLoading(true);\n\n    try {\n      const model = await mobilenet.load();\n      setModel(model);\n      setIsModelLoading(false);\n    } catch (error) {\n      console.log(error);\n      setIsModelLoading(false);\n    }\n  };\n\n  const uploadImage = e => {\n    const {\n      files\n    } = e.target;\n\n    if (files.length > 0) {\n      const url = URL.createObjectURL(files[0]);\n      setImageUrl(url);\n    } else {\n      setImageUrl(null);\n    }\n  };\n\n  const identify = async () => {\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    console.log(results);\n  };\n\n  const handleOnChange = () => {};\n\n  useEffect(() => {\n    loadModel();\n  }, []);\n\n  if (isModelLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"model Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header\",\n      children: \"Image Identifiaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        capture: \"camera\",\n        className: \"uploadInput\",\n        onChange: uploadImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"OR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Image Url\",\n        ref: textInputRef,\n        onChange: handleOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainWrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mainContent\",\n          children: /*#__PURE__*/_jsxDEV(\"scrollY\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"imageHolder\",\n              children: imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: imageUrl,\n                alt: \"upload Preview\",\n                crossOrigin: \"anonymous\",\n                ref: imageRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 13\n            }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"resultsHolder\",\n              children: results.map((result, index) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"result\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: result.className\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"confidence\",\n                    children: [\"Confidence level: \", (result.probability * 100).toFixed(2), \"% \", index === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"bestGuess\",\n                      children: \"Best Guess\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 69,\n                      columnNumber: 141\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 69,\n                    columnNumber: 37\n                  }, this)]\n                }, result.className, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 33\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: identify,\n          children: \"Identify Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yoe28vW1D3KNbFUBcJfQWdkdDvc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/E-mistri/image_detection/src/App.js"],"names":["mobilenet","useState","useEffect","useRef","App","isModelLoading","setIsModelLoading","model","setModel","imageUrl","setImageUrl","results","setResults","imageRef","textInputRef","loadModel","load","error","console","log","uploadImage","e","files","target","length","url","URL","createObjectURL","identify","classify","current","handleOnChange","map","result","index","className","probability","toFixed"],"mappings":"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","sourcesContent":["import * as mobilenet from '@tensorflow-models/mobilenet';\nimport { useState,  useEffect,useRef } from 'react';\n\nfunction App() {\n  const [isModelLoading, setIsModelLoading] = useState(false)\n  const [model, setModel] = useState(null)\n  const [imageUrl,setImageUrl] = useState(null)\n  const [results, setResults] = useState([])\n  const imageRef = useRef()\n  const textInputRef = useRef()\n  \n  const loadModel = async() =>{\n    setIsModelLoading(true)\n    try{\n      const model = await mobilenet.load()\n      setModel(model)\n      setIsModelLoading(false)\n    }\n    catch(error){\n      console.log(error)\n      setIsModelLoading(false)\n\n    }\n  }\n  const uploadImage= (e) =>{\n    const {files} = e.target\n    if(files.length>0){\n      const url = URL.createObjectURL(files[0])\n      setImageUrl(url)\n    }\n    else{\n      setImageUrl(null)\n    }\n  }\n  const identify= async ()=>{\n    const results =await model.classify(imageRef.current)\n     setResults(results)\n    console.log(results)\n  }\n  const handleOnChange = () =>{\n\n  }\n  useEffect(()=>{\n    loadModel()\n  },[])\n  if(isModelLoading){\n    return <h2>model Loading...</h2>\n  }\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Image Identifiaction</h1>\n      <div>\n        <input type= \"file\" accept= 'image/*' capture= 'camera' className='uploadInput'\n        onChange={uploadImage}/>\n        <span>OR</span>\n        <input type=\"text\" placeholder=\"Enter Image Url\" ref={textInputRef} onChange={handleOnChange}/>\n       <div className='mainWrapper'>\n          <div className = \"mainContent\">\n            <scrollY>\n            <div className = \"imageHolder\">\n             {imageUrl && <img src={imageUrl} alt=\"upload Preview\" crossOrigin=\"anonymous\" ref = {imageRef}/>}\n            \n            </div>\n            {results.length > 0 && <div className='resultsHolder'>\n                        {results.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Guess</span>}</span>\n                                </div>\n                            )\n                        })}\n            </div>}\n          </scrollY>\n          </div>\n          \n          {imageUrl && <button className = 'button' onClick={identify}>Identify Image</button>}\n       </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}