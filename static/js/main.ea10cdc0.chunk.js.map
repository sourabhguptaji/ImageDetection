{"version":3,"sources":["App.js","index.js"],"names":["App","useState","isModelLoading","setIsModelLoading","model","setModel","imageUrl","setImageUrl","results","setResults","imageRef","useRef","textInputRef","loadModel","a","mobilenet","console","log","identify","classify","current","useEffect","className","type","accept","capture","onChange","e","files","target","length","url","URL","createObjectURL","placeholder","ref","value","src","alt","crossOrigin","map","result","index","probability","toFixed","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6hBAoFeA,MAjFf,WACE,MAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA0BF,mBAAS,MAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA+BJ,mBAAS,MAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAAS,IAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,mBACXC,EAAeD,mBAEfE,EAAS,uCAAG,4BAAAC,EAAA,6DAChBX,GAAkB,GADF,kBAGMY,MAHN,OAGRX,EAHQ,OAIdC,EAASD,GACTD,GAAkB,GALJ,gDAQda,QAAQC,IAAR,MACAd,GAAkB,GATJ,yDAAH,qDAuBTe,EAAQ,uCAAE,4BAAAJ,EAAA,sEACOV,EAAMe,SAAST,EAASU,SAD/B,OACRZ,EADQ,OAEbC,EAAWD,GACZQ,QAAQC,IAAIT,GAHE,2CAAF,qDAYd,OAHAa,qBAAU,WACRR,MACA,IACCX,EACM,kDAGP,sBAAKoB,UAAU,MAAf,UACE,oBAAIA,UAAU,SAAd,kCACA,gCACE,uBAAOC,KAAM,OAAOC,OAAQ,UAAUC,QAAS,SAASH,UAAU,cAClEI,SA9Ba,SAACC,GAClB,IAAOC,EAASD,EAAEE,OAAXD,MACP,GAAGA,EAAME,OAAO,EAAE,CAChB,IAAMC,EAAMC,IAAIC,gBAAgBL,EAAM,IACtCrB,EAAYwB,QAGZxB,EAAY,SAwBV,sBAAMe,UAAU,KAAhB,mBACA,uBAAOC,KAAK,OAAOW,YAAY,kBAAkBC,IAAKvB,EAAcc,SAjBnD,SAACC,GACtBpB,EAAYoB,EAAEE,OAAOO,OACrB3B,EAAW,OAgBR,sBAAKa,UAAU,cAAf,UACG,sBAAKA,UAAY,cAAjB,UAEE,qBAAKA,UAAY,cAAjB,SACEhB,GAAY,qBAAK+B,IAAK/B,EAAUgC,IAAI,iBAAiBC,YAAY,YAAYJ,IAAOzB,MAGrFF,EAAQsB,OAAS,GAAK,qBAAKR,UAAU,gBAAf,SACVd,EAAQgC,KAAI,SAACC,EAAQC,GAClB,OACI,sBAAKpB,UAAU,SAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBmB,EAAOnB,YAC/B,uBAAMA,UAAU,aAAhB,gCAAsE,IAArBmB,EAAOE,aAAmBC,QAAQ,GAAnF,KAAmG,IAAVF,GAAe,sBAAMpB,UAAU,YAAhB,6BAF/EmB,EAAOnB,mBAUzDhB,GAAY,wBAAQgB,UAAY,SAASuB,QAAS3B,EAAtC,sCCxEvB4B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ea10cdc0.chunk.js","sourcesContent":["import * as mobilenet from '@tensorflow-models/mobilenet';\nimport { useState,  useEffect,useRef } from 'react';\n\nfunction App() {\n  const [isModelLoading, setIsModelLoading] = useState(false)\n  const [model, setModel] = useState(null)\n  const [imageUrl,setImageUrl] = useState(null)\n  const [results, setResults] = useState([])\n  const imageRef = useRef()\n  const textInputRef = useRef()\n  \n  const loadModel = async() =>{\n    setIsModelLoading(true)\n    try{\n      const model = await mobilenet.load()\n      setModel(model)\n      setIsModelLoading(false)\n    }\n    catch(error){\n      console.log(error)\n      setIsModelLoading(false)\n\n    }\n  }\n  const uploadImage= (e) =>{\n    const {files} = e.target\n    if(files.length>0){\n      const url = URL.createObjectURL(files[0])\n      setImageUrl(url)\n    }\n    else{\n      setImageUrl(null)\n    }\n  }\n  const identify= async ()=>{\n    const results =await model.classify(imageRef.current)\n     setResults(results)\n    console.log(results)\n  }\n  const handleOnChange = (e) =>{\n    setImageUrl(e.target.value)\n    setResults([])\n  }\n  useEffect(()=>{\n    loadModel()\n  },[])\n  if(isModelLoading){\n    return <h2>model Loading...</h2>\n  }\n  return (\n    <div className=\"App\">\n      <h1 className=\"header\">Image Identifiaction</h1>\n      <div>\n        <input type= \"file\" accept= 'image/*' capture= 'camera' className='uploadInput'\n        onChange={uploadImage}/>\n        <span className=\"or\">OR   </span>\n        <input type=\"text\" placeholder=\"Enter Image Url\" ref={textInputRef} onChange={handleOnChange}/>\n       <div className='mainWrapper'>\n          <div className = \"mainContent\">\n            \n            <div className = \"imageHolder\">\n             {imageUrl && <img src={imageUrl} alt=\"upload Preview\" crossOrigin=\"anonymous\" ref = {imageRef}/>}\n            \n            </div>\n            {results.length > 0 && <div className='resultsHolder'>\n                        {results.map((result, index) => {\n                            return (\n                                <div className='result' key={result.className}>\n                                    <span className='name'>{result.className}</span>\n                                    <span className='confidence'>Confidence level: {(result.probability * 100).toFixed(2)}% {index === 0 && <span className='bestGuess'>Best Guess</span>}</span>\n                                </div>\n                            )\n                        })}\n            </div>}\n          \n          </div>\n          \n          {imageUrl && <button className = 'button' onClick={identify}>Identify Image</button>}\n       </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}